package com.atm.commands;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;

import javax.crypto.SecretKey;

import com.nyle.RSA;
import com.nyle.SecureBanking;
import com.nyle.SecurityUtils;
import com.nyle.Utils;
import com.nyle.enumerations.Algorithms;
import com.nyle.enumerations.MessageHeaders;
import com.nyle.enumerations.RequestTypes;

public class ConnectCommand implements Command {
    private ObjectInputStream in;
    private ObjectOutputStream out;
    private SecureBanking secure;
    private SecretKey initialKey;
    private String id;

    public void getIDandInitialKey() { //takes data from txt and sets instance variables

    }
    public void setInitialKey(String key) { //writes new initial key generated by bank server into txt file

    }
    @SuppressWarnings("unchecked")
    public void initialExchange() {
        try {
            //atm: ID || n
            String nonce = Utils.generateNonce();
            HashMap<MessageHeaders, String> request = new HashMap<MessageHeaders, String>();
            request.put(MessageHeaders.REQUESTTYPE, RequestTypes.SECURE_CONNECTION.toString());
            request.put(MessageHeaders.ID, id);
            request.put(MessageHeaders.NONCE, nonce);
            out.writeObject(request);
            out.flush();

            //bank: E(initialKey, puBK || f(n) || initialKey')
            byte[] response = (byte[]) in.readObject();
            HashMap<MessageHeaders, String> bankMessage = (HashMap<MessageHeaders, String>) SecurityUtils.decrypt(response, initialKey, Algorithms.AES.INSTANCE);
            nonce = secure.nonceFunction(nonce);
            if(!nonce.equals(bankMessage.get(MessageHeaders.NONCE)))
                return;
            PublicKey bankPuKey = RSA.stringToPublicKey(bankMessage.get(MessageHeaders.RESPONSE));
            secure.setpublicKeyPartner(bankPuKey);
            setInitialKey(bankMessage.get(MessageHeaders.SESSIONKEY));

            //atm: E(initialKey, puAK)
            request = new HashMap<MessageHeaders, String>();
            PublicKey atmPuKey = secure.getPublicKey();
            request.put(MessageHeaders.RESPONSE, Base64.getEncoder().encodeToString(atmPuKey.getEncoded())); //rebuild securinyle
            byte[] req = SecurityUtils.encrypt(request, initialKey, Algorithms.AES.INSTANCE);
            out.writeObject(req);
            out.flush();

            //bank: 200
            response = (byte[]) in.readObject();
            bankMessage = (HashMap<MessageHeaders, String>) SecurityUtils.decrypt(response, initialKey, Algorithms.AES.INSTANCE);
            System.out.println(bankMessage.get(MessageHeaders.RESPONSECODE));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void generateMasterKey() {
        
    }
    @Override
    public void execute() {
        
    }
    
}
